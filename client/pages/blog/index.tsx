import React, { useEffect, useState } from 'react'
import Head from 'next/head'
import { GetServerSideProps, GetServerSidePropsResult } from 'next'

import Navicon from '@/components/Navicon'
import BarrenTree from '@/components/BarrenTree'
import Article from '@/components/blog/Article'
import BackwardButtons from '@/components/blog/BackButtons'
import ForwardButtons from '@/components/blog/ForwardButtons'
import SearchBox from '@/components/blog/SearchBox'

import styles from '@/styles/Blog.module.css'

import { ArticleProvider, ArticleConverter } from '@/modules/blog'
import { ArticleAPIResponse } from 'pages/api/article'
import { useRouter } from 'next/dist/client/router'

interface BlogPageProps {
    articles: DataType.SerializedArticle[]
}

const BlogListPage: React.FC<BlogPageProps> = props => {
    const converter = new ArticleConverter()
    const [articles, setArticles] = useState<DataType.Article[]>(props.articles.map(converter.deserialize))
    const [page, setPage] = useState<number>(0)
    const router = useRouter()
    useEffect(() => {
        router.query.page = String(page)
        console.debug({ page })
        router.push(router)
    }, [page])
    const backClick = async () => {
        const res = await fetch(`/api/article?page=${page + 1}`)
        if (res.status > 300) return
        const { articles } = await res.json() as ArticleAPIResponse
        setPage(page + 1)
        setArticles(articles.map(converter.deserialize))
    }
    const mostBackClick = () => { }
    const forwardClick = async () => {
        const res = await fetch(`/api/article?page=${page - 1}`)
        if (res.status > 300) return
        const { articles } = await res.json() as ArticleAPIResponse
        setPage(page - 1)
        setArticles(articles.map(converter.deserialize))
    }
    const mostForwardClick = () => { }
    return (
        <div>
            <Head>
                <title>Blog</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <Navicon />
            <div className={styles.field}>
                <div className={styles["tree-wrapper"]}>
                    <div className={styles["tree-size-wrapper"]}>
                        <BarrenTree />
                    </div>
                </div>
                <SearchBox />
                <div className={styles["article-field"]}>
                    {articles
                        .map((article, i) => (
                            <div key={String(i)} style={{ position: 'absolute', left: "15%", top: 130 + 120 * i }}>
                                <Article {...article} />
                            </div>)
                        )}
                </div>
                <ForwardButtons forwardClick={forwardClick} mostForwardClick={mostForwardClick} />
                <BackwardButtons backClick={backClick} mostBackClick={mostBackClick} />
            </div>
        </div>
    )
}

export const getServerSideProps: GetServerSideProps = async (context) => {
    const query = context.query
    const page = parseInt(query.page as string)
    let articles: any
    const converter = new ArticleConverter()
    try {
        const provider = new ArticleProvider()
        articles = await provider.getArticle(page ? page : 0)
    } catch (e) {
        console.error(e)
        articles = []
    }
    return { props: { articles: articles.map(converter.serialize) } } as GetServerSidePropsResult<BlogPageProps>
}

export default BlogListPage